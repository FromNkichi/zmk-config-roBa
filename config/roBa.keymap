#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define SCROLL 3
#define NUM 6
#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        change_IME: change_IME {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LA(GRAVE) &kp ESCAPE>,
                <&macro_wait_time 50>,
                <&macro_tap_time 50>;

            label = "CHANGE_IME";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        new_msc: new_msc {
            compatible = "zmk,behavior-sensor-rotate";
            label = "NEW_MSC";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q           &kp W         &kp E         &kp R  &kp T                              &kp Y          &kp U      &kp I      &kp O      &kp P
&kp TAB         &kp A         &kp S         &kp D  &kp F  &mkp MCLK      &kp G        &kp H          &kp J      &kp K      &kp L      &kp ENTER
&kp LEFT_SHIFT  &kp Z         &kp X         &kp C  &kp V  &kp B          &kp N        &kp M          &mkp LCLK  &mkp RCLK  &kp COMMA  &kp PERIOD
&kp LCTRL       &kp LEFT_WIN  &kp LEFT_ALT  &mo 2  &mo 1  &kp SPACE      &change_IME  &kp BACKSPACE                                   &kp MINUS
            >;

            sensor-bindings = <&new_msc>;
        };

        FUNCandNUM {
            bindings = <
&kp ESC       &kp PAGE_UP    &kp HOME   &kp UP            &kp END                                          &kp EQUAL        &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PLUS
&trans        &kp PAGE_DOWN  &kp LEFT   &kp DOWN          &kp RIGHT          &trans       &kp PRINTSCREEN  &kp DOT          &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS
&trans        &kp BACKSLASH  &kp SLASH  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SQT      &kp SEMICOLON    &kp KP_NUMBER_0  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp ASTERISK
&kp LEFT_WIN  &kp LCTRL      &trans     &trans            &trans             &trans       &trans           &trans                                                              &kp SLASH
            >;

            sensor-bindings = <&new_msc>;
        };

        SYMBOLandOTHER {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT                              &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp TILDE        &none         &none         &kp CAPSLOCK  &kp INSERT   &trans      &kp LC(LS(D))   &none      &mkp MB4       &mkp MB5      &kp MINUS             &kp EQUAL
&kp F1           &kp F2        &kp F3        &kp F4        &kp F5       &kp F6      &kp F7          &kp F8     &kp F9         &kp F10       &kp F11               &kp F12
&bt BT_SEL 0     &bt BT_SEL 1  &bt BT_SEL 2  &trans        &trans       &trans      &kp LEFT_SHIFT  &trans                                                        &kp LC(LA(DELETE))
            >;

            sensor-bindings = <&new_msc>;
        };
    };
};
